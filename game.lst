------- FILE game.asm LEVEL 1 PASS 2
      1  1d90 ????						;-----------------------------------------
      2  1d90 ????						; Work in progress demo for Star Fox 1980
      3  1d90 ????						;-----------------------------------------
      4  1d90 ????						;-----------------------------Macros-------------------------------
      5  1d90 ????	       00 57	   PLAYER_HEALTH equ	$57
      6  1d90 ????	       00 58	   PLAYER_POS equ	$58
      7  1d90 ????	       00 59	   BOSS_POS   equ	$59
      8  1d90 ????	       00 5a	   BOSS_HEALTH equ	$5a
      9  1d90 ????	       00 5b	   SCORE      equ	$5b
     10  1d90 ????	       00 5c	   HISCORE    equ	$5c
     11  1d90 ????	       00 5d	   MINIONS    equ	$5d
     12  1d90 ????	       00 5e	   MINION_IND equ	$5e
     13  1d90 ????	       00 5f	   LEVEL      equ	$5f
     14  1d90 ????	       00 3c	   RANDNUM    equ	60
     15  1d90 ????
     16  1d90 ????	       ff d2	   CHROUT     equ	$ffd2
     17  1d90 ????	       fd 22	   RESET      equ	$fd22
     18  1d90 ????	       ff e4	   GETIN      equ	$ffe4
     19  1d90 ????	       90 0a	   SOUND1     equ	$900a
     20  1d90 ????	       90 0b	   SOUND2     equ	$900b
     21  1d90 ????	       90 0c	   SOUND3     equ	$900c
     22  1d90 ????	       90 0d	   NOISE      equ	$900d
     23  1d90 ????	       90 0e	   VOLUME     equ	$900e
     24  1d90 ????	       90 0f	   SCRCOLOR   equ	$900f
     25  1d90 ????	       02 86	   TXTCOLOR   equ	$0286
     26  1d90 ????
     27  1d90 ????	       f7 67	   SETTIM     equ	$f767
     28  1d90 ????						;----------------------------End Macros----------------------------
     29  1d90 ????
     30  1d90 ????
     31  1d90 ????						;----------------------------Basic Stub----------------------------
     32  1d90 ????				      Processor	6502
     33  1001					      org	$1001	; Unexpanded VIC
     34  1001
     35  1001							; BASIC stub (unexpanded vic)
     36  1001		       0b 10		      dc.w	$100b	; Pointer to next BASIC line
     37  1003		       bd 07		      dc.w	1981	; BASIC Line#
     38  1005		       9e		      dc.b	$9e	; BASIC SYS token
     39  1006		       34 31 30 39	      dc.b	$34,$31,$30,$39	; 4109 (ML start)
     40  100a		       00		      dc.b	0	; End of BASIC line
     41  100b		       00 00		      dc.w	0	; End of BASIC program
     42  100d							;-----------------------------End Stub----------------------------
     43  100d
------- FILE title.asm LEVEL 2 PASS 2
      0  100d					      include	"title.asm"
      1  100d							;---------------------------Main Title Screen------------------------------
      2  100d				   title
      3  100d		       20 5f e5 	      jsr	$e55f	; clear the screen
      4  1010
      5  1010		       a9 40		      lda	#$40	; load new text colour
      6  1012		       8d 86 02 	      sta	TXTCOLOR	; change text colour
      7  1015
      8  1015		       a9 19		      lda	#$19	; load new background colour
      9  1017		       8d 0f 90 	      sta	SCRCOLOR	; change background and border colours
     10  101a
     11  101a							; loop that iterates through title characters
     12  101a		       a0 00		      ldy	#00	; initialize counter at 0
     13  101c
     14  101c				   titleloop
     15  101c		       b9 99 1c 	      lda	titlescreen,y
     16  101f		       20 d2 ff 	      jsr	CHROUT
     17  1022		       c8		      iny
     18  1023		       c0 65		      cpy	#101	; 101 characters in the title screen
     19  1025		       d0 f5		      bne	titleloop
     20  1027
     21  1027				   titlewait
     22  1027		       20 e4 ff 	      jsr	GETIN	; pressing any input ends title screen
     23  102a		       f0 fb		      beq	titlewait
     24  102c		       4c 73 11 	      jmp	draw_init
------- FILE game.asm
------- FILE boss.asm LEVEL 2 PASS 2
      0  102f					      include	"boss.asm"
      1  102f							;-----------------------------------------
      2  102f							; Handles boss spawning and movement
      3  102f							;-----------------------------------------
      4  102f
      5  102f				   spawn_boss
      6  102f		       a2 05		      ldx	#$05	; Initialize boss health
      7  1031		       86 5a		      stx	BOSS_HEALTH
      8  1033		       a2 1f		      ldx	#$1f	; Boss position
      9  1035		       86 59		      stx	BOSS_POS	;
     10  1037		       60		      rts
     11  1038
     12  1038				   draw_boss
     13  1038
     14  1038		       a6 59		      ldx	BOSS_POS
     15  103a		       a9 07		      lda	#$07	; Boss top left character
     16  103c		       9d 00 1e 	      sta	$1e00 ,x	; Store it at the right locatin
     17  103f		       a9 02		      lda	#$02	; Colour
     18  1041		       9d 00 96 	      sta	$9600 ,x
     19  1044
     20  1044		       e8		      inx
     21  1045		       a9 08		      lda	#$08	; Boss top mid-left character
     22  1047		       9d 00 1e 	      sta	$1e00 ,x	; Store it at the right locatin
     23  104a		       a9 02		      lda	#$02	; Colour
     24  104c		       9d 00 96 	      sta	$9600 ,x
     25  104f
     26  104f		       e8		      inx
     27  1050		       a9 09		      lda	#$09	; Boss top mid-right character
     28  1052		       9d 00 1e 	      sta	$1e00 ,x	; Store it at the right locatin
     29  1055		       a9 02		      lda	#$02	; Colour
     30  1057		       9d 00 96 	      sta	$9600 ,x
     31  105a
     32  105a		       e8		      inx
     33  105b		       a9 0a		      lda	#$0a	; Boss top right character
     34  105d		       9d 00 1e 	      sta	$1e00 ,x	; Store it at the right locatin
     35  1060		       a9 02		      lda	#$02	; Colour
     36  1062		       9d 00 96 	      sta	$9600 ,x
     37  1065
     38  1065		       a5 59		      lda	BOSS_POS	; Get boss position
     39  1067		       18		      clc
     40  1068		       69 16		      adc	#$16	; Get the bottom row
     41  106a		       aa		      tax		; Transfer it to x register
     42  106b		       a9 0b		      lda	#$0b	; Boss bottom left character
     43  106d		       9d 00 1e 	      sta	$1e00 ,x	; Store it at the right locatin
     44  1070		       a9 02		      lda	#$02	; Colour
     45  1072		       9d 00 96 	      sta	$9600 ,x
     46  1075
     47  1075		       e8		      inx
     48  1076		       a9 0c		      lda	#$0c	; Boss bottom mid-left character
     49  1078		       9d 00 1e 	      sta	$1e00 ,x	; Store it at the right locatin
     50  107b		       a9 02		      lda	#$02	; Colour
     51  107d		       9d 00 96 	      sta	$9600 ,x
     52  1080
     53  1080		       e8		      inx
     54  1081		       a9 0d		      lda	#$0d	; Boss bottom mid-right character
     55  1083		       9d 00 1e 	      sta	$1e00 ,x	; Store it at the right locatin
     56  1086		       a9 02		      lda	#$02	; Colour
     57  1088		       9d 00 96 	      sta	$9600 ,x
     58  108b
     59  108b		       e8		      inx
     60  108c		       a9 0e		      lda	#$0e	; Boss bottom right character
     61  108e		       9d 00 1e 	      sta	$1e00 ,x	; Store it at the right locatin
     62  1091		       a9 02		      lda	#$02	; Colour
     63  1093		       9d 00 96 	      sta	$9600 ,x
     64  1096
     65  1096		       60		      rts
     66  1097
     67  1097				   boss_move_left
     68  1097		       a6 59		      ldx	BOSS_POS	; Get current boss location
     69  1099		       e0 16		      cpx	#$16	; is it touching the left boundary
     70  109b		       f0 04		      beq	boss_move_right	; if so move right instead
     71  109d		       ca		      dex		; if not move left
     72  109e		       86 59		      stx	BOSS_POS	; and update new location
     73  10a0		       60		      rts
     74  10a1
     75  10a1				   boss_move_right
     76  10a1		       a6 59		      ldx	BOSS_POS	; Get current boss location
     77  10a3		       e0 28		      cpx	#$28	; is it touching right boundary
     78  10a5		       f0 f0		      beq	boss_move_left	; if so move left instead
     79  10a7		       e8		      inx		; if not move right
     80  10a8		       86 59		      stx	BOSS_POS	; and update new location
     81  10aa		       60		      rts
     82  10ab
     83  10ab				   boss_ai
     84  10ab		       a5 59		      lda	BOSS_POS	; Get the boss position
     85  10ad		       69 a2		      adc	#$a2	; Add an offset
     86  10af		       c5 58		      cmp	PLAYER_POS	; Compare it with player position
     87  10b1		       f0 04		      beq	boss_ai_shoot	; If the boss is where the player is shoot
     88  10b3		       90 ec		      bcc	boss_move_right	; If player is to the right of boss move right
     89  10b5		       b0 e0		      bcs	boss_move_left	; If player to the left of boss move left
     90  10b7
     91  10b7				   boss_ai_shoot
     92  10b7		       60		      rts
     93  10b8
     94  10b8
------- FILE game.asm
------- FILE minions.asm LEVEL 2 PASS 2
      0  10b8					      include	"minions.asm"
      1  10b8							;-----------------------------------------
      2  10b8							; Handles minions spawning and movement
      3  10b8							;-----------------------------------------
      4  10b8
      5  10b8				   spawn_minions
      6  10b8		       20 66 11 	      jsr	randgen	; Generate random number
      7  10bb		       46 3c		      lsr	RANDNUM	; shift bit 0
      8  10bd		       90 02		      bcc	spawn_laser_minion	; If even number generate enemy type 1
      9  10bf		       b0 0f		      bcs	spawn_rocket_minion	; If odd number generate enemy type 2
     10  10c1
     11  10c1				   spawn_laser_minion
     12  10c1		       a6 5e		      ldx	MINION_IND	; Get the current index
     13  10c3		       a9 01		      lda	#$01	; 01 represents laser
     14  10c5		       9d 88 1d 	      sta	minion_status ,x	; Save the status
     15  10c8		       e8		      inx		; Increment the index
     16  10c9		       86 5e		      stx	MINION_IND	; Save the new index
     17  10cb		       e0 04		      cpx	#$04	; If not at the end of the index
     18  10cd		       d0 e9		      bne	spawn_minions	; Keep spawning more minions
     19  10cf		       60		      rts
     20  10d0
     21  10d0				   spawn_rocket_minion
     22  10d0		       a6 5e		      ldx	MINION_IND	; Get the current index
     23  10d2		       a9 02		      lda	#$02	; 02 represents rocket
     24  10d4		       9d 88 1d 	      sta	minion_status ,x	; Save the status
     25  10d7		       e8		      inx		; Increment the index
     26  10d8		       86 5e		      stx	MINION_IND	; Save the new index
     27  10da		       e0 04		      cpx	#$04	; If not at the end of the index
     28  10dc		       d0 da		      bne	spawn_minions
     29  10de		       60		      rts
     30  10df
     31  10df
     32  10df				   draw_minions
     33  10df		       a6 5e		      ldx	MINION_IND	; Get the current minion index
     34  10e1		       bc 88 1d 	      ldy	minion_status ,x	; Get the minion status
     35  10e4		       c0 01		      cpy	#$01	; Is it laser minion?
     36  10e6		       f0 06		      beq	draw_laser_minion	; If so draw it
     37  10e8		       c0 02		      cpy	#$02	; Is it rocket minion?
     38  10ea		       f0 14		      beq	draw_rocket_minion	; Draw it
     39  10ec		       d0 21		      bne	end_draw_minion	; Otherwise dont draw a thing
     40  10ee				   draw_laser_minion
     41  10ee		       a6 5e		      ldx	MINION_IND	; Get the current minion index
     42  10f0		       bc 8c 1d 	      ldy	minion_pos ,x	; Get the position of the minion
     43  10f3		       a9 0f		      lda	#$0f	; Laser minion char
     44  10f5		       99 00 1e 	      sta	$1e00 ,y	; At the location
     45  10f8		       a9 02		      lda	#$02
     46  10fa		       99 00 96 	      sta	$9600 ,y	; Color location
     47  10fd		       4c 0f 11 	      jmp	end_draw_minion	; Done drawing
     48  1100
     49  1100				   draw_rocket_minion
     50  1100		       a6 5e		      ldx	MINION_IND	; Get the current minion index
     51  1102		       bc 8c 1d 	      ldy	minion_pos ,x	; Get the position of the minion
     52  1105		       a9 10		      lda	#$10	; Rocket minion char
     53  1107		       99 00 1e 	      sta	$1e00 ,y	; At the location
     54  110a		       a9 05		      lda	#$05
     55  110c		       99 00 96 	      sta	$9600 ,y	; Color location
     56  110f
     57  110f				   end_draw_minion
     58  110f		       e8		      inx		; Next minion
     59  1110		       86 5e		      stx	MINION_IND	; store the new minion
     60  1112		       e0 04		      cpx	#$04	; Are we done drawing minions?
     61  1114		       d0 c9		      bne	draw_minions	; If not keep drawing
     62  1116
     63  1116		       60		      rts
     64  1117
     65  1117				   minion_move_left
     66  1117		       a6 5e		      ldx	MINION_IND
     67  1119		       bd 8c 1d 	      lda	minion_pos ,x
     68  111c		       c9 6e		      cmp	#$6e
     69  111e		       f0 3a		      beq	minion_move_end
     70  1120		       c9 84		      cmp	#$84
     71  1122		       f0 36		      beq	minion_move_end
     72  1124		       c9 9a		      cmp	#$9a
     73  1126		       f0 32		      beq	minion_move_end
     74  1128		       c9 b0		      cmp	#$b0
     75  112a		       f0 2e		      beq	minion_move_end
     76  112c		       c9 c6		      cmp	#$c6
     77  112e		       f0 2a		      beq	minion_move_end
     78  1130		       c9 dc		      cmp	#$dc
     79  1132		       f0 26		      beq	minion_move_end
     80  1134
     81  1134		       de 8c 1d 	      dec	minion_pos ,x
     82  1137		       4c 5a 11 	      jmp	minion_move_end
     83  113a
     84  113a				   minion_move_right
     85  113a		       a6 5e		      ldx	MINION_IND
     86  113c		       bd 8c 1d 	      lda	minion_pos ,x
     87  113f		       c9 83		      cmp	#$83
     88  1141		       f0 17		      beq	minion_move_end
     89  1143		       c9 99		      cmp	#$99
     90  1145		       f0 13		      beq	minion_move_end
     91  1147		       c9 af		      cmp	#$af
     92  1149		       f0 0f		      beq	minion_move_end
     93  114b		       c9 c5		      cmp	#$c5
     94  114d		       f0 0b		      beq	minion_move_end
     95  114f		       c9 db		      cmp	#$db
     96  1151		       f0 07		      beq	minion_move_end
     97  1153		       c9 f1		      cmp	#$f1
     98  1155		       f0 03		      beq	minion_move_end
     99  1157
    100  1157		       de 8c 1d 	      dec	minion_pos ,x
    101  115a
    102  115a				   minion_move_end
    103  115a		       e8		      inx
    104  115b		       86 5e		      stx	MINION_IND
    105  115d
    106  115d		       e4 5d		      cpx	MINIONS
    107  115f		       d0 01		      bne	minion_ai
    108  1161
    109  1161		       60		      rts
    110  1162
    111  1162				   minion_ai
    112  1162		       4c 17 11 	      jmp	minion_move_left
    113  1165
    114  1165		       60		      rts
    115  1166
    116  1166
------- FILE game.asm
------- FILE utilities.asm LEVEL 2 PASS 2
      0  1166					      include	"utilities.asm"
      1  1166							;-------------------------------------------------------
      2  1166							; Math utility subroutines and Random number generation
      3  1166							;
      4  1166							;-------------------------------------------------------
      5  1166							;-------------------------------------------------------
      6  1166							; Generate random number and store it
      7  1166							;-------------------------------------------------------
      8  1166				   randgen
      9  1166
     10  1166		       ad 14 91 	      lda	$9114	; Timer 1 low byte
     11  1169		       6d 18 91 	      adc	$9118	; Timer 2 low byte
     12  116c		       18		      clc		; Clear carry
     13  116d		       85 3c		      sta	RANDNUM	; Now store the temporary random number
     14  116f		       60		      rts
------- FILE game.asm
     48  1170
     49  1170		       4c 0d 10 	      jmp	title
     50  1173
     51  1173							;---------------------------Initialization-----------------------------------
     52  1173				   draw_init
     53  1173
     54  1173		       a9 08		      lda	#$08	; load new black background colour
     55  1175		       8d 0f 90 	      sta	SCRCOLOR	; change background and border colours
     56  1178
     57  1178		       a9 ff		      lda	#$ff	; loading the value into $9005 makes the VIC not look into the rom location for characters, instead the vic looks at memory starting at $1c00
     58  117a		       8d 05 90 	      sta	$9005	; the above can be found on pages 85 and 86 of the VIC 20 manual
     59  117d
     60  117d		       20 5f e5 	      jsr	$e55f	; clear screen
     61  1180
     62  1180		       20 88 12 	      jsr	refresh
     63  1183
     64  1183							; Draw hearts
     65  1183		       a9 02		      lda	#$02	; Heart character
     66  1185		       8d e4 1f 	      sta	$1fe4
     67  1188		       8d e4 97 	      sta	$97e4
     68  118b		       8d e5 1f 	      sta	$1fe5
     69  118e		       8d e5 97 	      sta	$97e5
     70  1191		       8d e6 1f 	      sta	$1fe6
     71  1194		       8d e6 97 	      sta	$97e6
     72  1197
     73  1197		       a0 04		      ldy	#$04	; draw starfighter character
     74  1199		       8c 96 1f 	      sty	$1f96	; 8086
     75  119c
     76  119c		       a0 06		      ldy	#$06	; color code
     77  119e		       8c 96 97 	      sty	$9796	; 38806
     78  11a1
     79  11a1
     80  11a1				   init
     81  11a1							;------------------------------Game state/variable initialization-----------------------------
     82  11a1		       a9 c2		      lda	#$c2
     83  11a3		       85 58		      sta	PLAYER_POS	; We are treating this location as ram, it contains the offset to add to the screen
     84  11a5		       a0 03		      ldy	#$03
     85  11a7		       84 57		      sty	PLAYER_HEALTH
     86  11a9
     87  11a9		       20 2f 10 	      jsr	spawn_boss
     88  11ac		       20 b8 10 	      jsr	spawn_minions
     89  11af
     90  11af		       a2 00		      ldx	#$00
     91  11b1		       86 5b		      stx	SCORE
     92  11b3		       86 5c		      stx	HISCORE
     93  11b5		       86 5f		      stx	LEVEL
     94  11b7		       86 5e		      stx	MINION_IND
     95  11b9		       a2 04		      ldx	#$04
     96  11bb		       86 5d		      stx	MINIONS
     97  11bd
     98  11bd							;----------------------------------music loop----------------------------------
     99  11bd
    100  11bd		       a9 0f		      lda	#$0f	; 15 is the max volume the speakers can be set at. The 1-15 values can be found at p(95,96) of the vic 20 manual
    101  11bf		       8d 0e 90 	      sta	$900e	; 900e controls volume, is where the volume values are written to. this address can be found at p(95,96) of the vic 20 manual
    102  11c2
    103  11c2				   playMusic
    104  11c2
    105  11c2		       a0 23		      ldy	#$23	;start of loop counter, music has 35 notes in it (23 in hex)
    106  11c4
    107  11c4				   loopMusic
    108  11c4
    109  11c4		       a9 01		      lda	#$01
    110  11c6		       98		      tya		; transferring y to a in prep to preserve it
    111  11c7		       48		      pha
    112  11c8		       48		      pha		; the first thing in the stack is the duration of the music
    113  11c9							;TAX						;X holds amount of time loop must run to make 1 second, assuming 3 jiffies as the loop delay, the A register is now free to hold stuff
    114  11c9
    115  11c9
    116  11c9				   anotherLoop
    117  11c9		       b9 12 1d 	      lda	main_notes,y
    118  11cc		       48		      pha		; the music note to play
    119  11cd		       b9 36 1d 	      lda	main_music_registers,y	; the register in now in A
    120  11d0		       aa		      tax		; the music register is now in x
    121  11d1		       68		      pla		; the music note to play is now in a
    122  11d2		       9d 00 90 	      sta	$9000,x	; the music note that needs to be played is now active in the indicated register
    123  11d5				   delan
    124  11d5		       20 fd 11 	      jsr	gameloop
    125  11d8		       20 35 12 	      jsr	delay
    126  11db		       68		      pla		; pull the loop count to make a second from the stack
    127  11dc		       aa		      tax		; loop count now in x
    128  11dd		       d0 06		      bne	endd
    129  11df		       ca		      dex		; x is decremented down
    130  11e0		       8a		      txa		; transfer x to a in preparation to do a push to preserve the decrement value in the stack
    131  11e1		       48		      pha		; push the decrement value into the stack
    132  11e2		       4c d5 11 	      jmp	delan
    133  11e5
    134  11e5				   endd
    135  11e5		       68		      pla
    136  11e6		       a8		      tay		; y now contains the index counter thing again
    137  11e7
    138  11e7		       a9 00		      lda	#$00
    139  11e9		       8d 0a 90 	      sta	SOUND1
    140  11ec		       8d 0b 90 	      sta	SOUND2
    141  11ef		       8d 0c 90 	      sta	SOUND3
    142  11f2		       88		      dey
    143  11f3		       c0 01		      cpy	#$01
    144  11f5		       f0 03		      beq	endd2
    145  11f7
    146  11f7		       4c c4 11 	      jmp	loopMusic
    147  11fa
    148  11fa				   endd2
    149  11fa		       4c c2 11 	      jmp	playMusic
    150  11fd
    151  11fd							;-------------------------------Main game loop-------------------------------
    152  11fd
    153  11fd				   gameloop
    154  11fd
    155  11fd		       20 88 12 	      jsr	refresh
    156  1200
    157  1200		       a5 c5		      lda	$00c5	; get current pressed key
    158  1202		       8d 98 1c 	      sta	key_pressed
    159  1205
    160  1205		       20 38 10 	      jsr	draw_boss
    161  1208		       a2 00		      ldx	#$00	; Reset minion index counter
    162  120a		       86 5e		      stx	MINION_IND
    163  120c		       20 df 10 	      jsr	draw_minions
    164  120f		       20 a1 12 	      jsr	moveplayer
    165  1212		       20 ab 10 	      jsr	boss_ai
    166  1215		       a2 00		      ldx	#$00	; Reset minion index counter
    167  1217		       86 5e		      stx	MINION_IND
    168  1219		       20 62 11 	      jsr	minion_ai
    169  121c		       20 35 12 	      jsr	delay
    170  121f		       20 43 12 	      jsr	collisioncheck
    171  1222
    172  1222		       a9 40		      lda	#64	; reset the key pressed
    173  1224		       8d 98 1c 	      sta	key_pressed
    174  1227
    175  1227
    176  1227		       a9 05		      lda	#$05	;load the character of the laser
    177  1229		       a2 00		      ldx	#$00
    178  122b		       9d 00 1f 	      sta	#$1f00,x	; the laser is now stored here, 1f00 + 30,000 = 9430
    179  122e
    180  122e		       20 c5 12 	      jsr	writePlayerShot
    181  1231		       20 ea 12 	      jsr	drawPlayerShot
    182  1234
    183  1234							;jsr writeEnemyShot
    184  1234							;jsr drawEnemyShot
    185  1234
    186  1234
    187  1234		       60		      rts
    188  1235
    189  1235
    190  1235				   delay		; (p 171 a0-a02 jiffy clock) p204 - 205 settim
    191  1235		       a9 f9		      LDA	#$f9	; 4F1A01, the max value the clock can be at, goes back to 0 after
    192  1237		       a2 19		      LDX	#$19
    193  1239		       a0 4f		      LDY	#$4f
    194  123b		       20 67 f7 	      JSR	$f767
    195  123e				   dosum
    196  123e		       a5 a0		      LDA	$A0
    197  1240		       d0 fc		      BNE	dosum
    198  1242		       60		      rts
    199  1243
    200  1243
    201  1243				   collisioncheck
    202  1243
    203  1243		       a6 58		      ldx	PLAYER_POS
    204  1245		       e0 b8		      cpx	#$b8
    205  1247		       f0 09		      beq	predec_player_health
    206  1249
    207  1249		       a6 58		      ldx	PLAYER_POS
    208  124b		       e0 cd		      cpx	#$cd
    209  124d		       f0 08		      beq	predec_player_health2
    210  124f
    211  124f		       4c 6b 12 	      jmp	next3
    212  1252
    213  1252
    214  1252				   predec_player_health
    215  1252		       a9 12		      lda	#18	; reset the key pressed
    216  1254		       4c 59 12 	      jmp	next2
    217  1257
    218  1257				   predec_player_health2
    219  1257		       a9 11		      lda	#17	; reset the key pressed
    220  1259				   next2
    221  1259		       8d 98 1c 	      sta	key_pressed
    222  125c		       20 a1 12 	      jsr	moveplayer
    223  125f
    224  125f
    225  125f				   decr_player_health
    226  125f
    227  125f		       20 6c 12 	      jsr	update_player_health
    228  1262		       a4 57		      ldy	PLAYER_HEALTH
    229  1264		       c0 00		      cpy	#$00
    230  1266		       d0 03		      bne	next3
    231  1268		       20 77 12 	      jsr	gameover
    232  126b
    233  126b				   next3
    234  126b		       60		      rts
    235  126c
    236  126c
    237  126c				   update_player_health
    238  126c		       a6 57		      ldx	PLAYER_HEALTH
    239  126e		       ca		      dex
    240  126f		       a9 00		      lda	#$00	; blank
    241  1271		       9d e4 1f 	      sta	$1fe4 ,x
    242  1274		       86 57		      stx	PLAYER_HEALTH
    243  1276		       60		      rts
    244  1277
    245  1277
    246  1277				   gameover
    247  1277		       20 5f e5 	      jsr	$e55f	; clear screen
    248  127a		       a9 19		      lda	#$19	; load new background colour
    249  127c		       8d 0f 90 	      sta	SCRCOLOR	; change background and border colours
    250  127f
    251  127f		       a9 08		      lda	#$8	; load new background colour
    252  1281		       8d 0f 90 	      sta	SCRCOLOR	; change background and border colours
    253  1284
    254  1284		       4c 77 12 	      jmp	gameover
    255  1287
    256  1287		       60		      rts
    257  1288
    258  1288
    259  1288							;----------------------------graphics---------------------------
    260  1288				   refresh
    261  1288
    262  1288		       a9 00		      lda	#$00
    263  128a		       a2 ff		      ldx	#$ff
    264  128c
    265  128c				   refreshloop1
    266  128c
    267  128c		       9d 00 1e 	      sta	$1e00 ,x
    268  128f		       ca		      dex
    269  1290		       d0 fa		      bne	refreshloop1
    270  1292		       9d 00 1e 	      sta	$1e00 ,x
    271  1295
    272  1295		       a2 f9		      ldx	#$f9
    273  1297
    274  1297				   refreshloop2
    275  1297		       9d 00 1f 	      sta	$1f00 ,x
    276  129a		       ca		      dex
    277  129b		       d0 fa		      bne	refreshloop2
    278  129d		       9d 00 1f 	      sta	$1f00 ,x
    279  12a0
    280  12a0		       60		      rts
    281  12a1
    282  12a1				   moveplayer
    283  12a1
    284  12a1		       a6 58		      ldx	PLAYER_POS
    285  12a3		       ad 98 1c 	      lda	key_pressed
    286  12a6
    287  12a6		       c9 12		      cmp	#18
    288  12a8		       f0 07		      beq	increment
    289  12aa
    290  12aa		       c9 11		      cmp	#17
    291  12ac		       f0 07		      beq	decrement
    292  12ae
    293  12ae		       4c b6 12 	      jmp	next
    294  12b1
    295  12b1				   increment
    296  12b1		       e8		      inx		; increment x by 1 to represent location as current location has moved 1
    297  12b2		       4c b6 12 	      jmp	next
    298  12b5				   decrement
    299  12b5		       ca		      dex
    300  12b6				   next
    301  12b6
    302  12b6		       86 58		      stx	PLAYER_POS
    303  12b8
    304  12b8		       a9 03		      lda	#$03	; current starfighter character
    305  12ba		       a6 58		      ldx	PLAYER_POS
    306  12bc		       9d 00 1f 	      sta	$1f00 ,x	; store it at the current location
    307  12bf
    308  12bf		       a9 06		      lda	#$06	; color code
    309  12c1		       9d 00 97 	      sta	$9700 ,x
    310  12c4
    311  12c4				   end
    312  12c4		       60		      rts
    313  12c5
    314  12c5
    315  12c5
    316  12c5							;-----------player laser subroutines
    317  12c5
    318  12c5				   writePlayerShot
    319  12c5							; find the first available space that is #$00
    320  12c5							;write #$1f to first value, then the players x position but shifted up 1 on the grid
    321  12c5							; calls another subroutine to draw the shot
    322  12c5
    323  12c5		       a0 08		      ldy	#$08	; this is 2x the number of shots we are allowing to be on screen, the max num is currently 4
    324  12c7
    325  12c7				   wpsLoop
    326  12c7		       b9 00 1d 	      LDA	playerShots,y	;the "first" thing holds 1e, 1f or 00. if it is 00 we want to write to it
    327  12ca		       c9 00		      cmp	#$00
    328  12cc		       f0 07		      beq	exitWpsLoop
    329  12ce		       88		      dey		; dec y so it points to the "suffix" of 1e or 1f
    330  12cf		       88		      dey		; dec again so it is pointing to the next prefix of 1e or 1f
    331  12d0		       d0 f5		      bne	wpsLoop
    332  12d2		       4c e9 12 	      jmp	endwpsLoop	;if the loop finishes without triggering exit, then no #$00 was found
    333  12d5
    334  12d5
    335  12d5				   exitWpsLoop		;the y register now contains the offset we need to write to for either 1f or 1e
    336  12d5		       a9 1f		      LDA	#$1f
    337  12d7		       99 00 1d 	      STA	playerShots,y
    338  12da		       88		      dey		;decrement to prepare for storing the suffix to the appropriate area in data
    339  12db		       98		      TYA		; prep y to be pushed to stack for storage
    340  12dc		       48		      PHA		; the y index is now in the stack
    341  12dd		       a5 58		      LDA	PLAYER_POS
    342  12df		       20 ae 13 	      jsr	shiftUp
    343  12e2		       aa		      TAX		; X is temporarily holding the player pos value
    344  12e3		       68		      PLA		; pull the y value into a
    345  12e4		       a8		      TAY		;transfer value back to y
    346  12e5		       8a		      TXA		;transfer the player pos back into A
    347  12e6		       99 00 1d 	      sta	playerShots ,y	; now the suffix should be properly stored
    348  12e9
    349  12e9				   endwpsLoop
    350  12e9		       60		      rts
    351  12ea
    352  12ea
    353  12ea
    354  12ea
    355  12ea
    356  12ea
    357  12ea				   drawPlayerShot
    358  12ea							;pull the first thing from the list that is not 00, draw laser to the specified location, then iterate through the location and repeat
    359  12ea							;also need a backstop subroutine to stop the fire from going past the screen in both directions, will likely need 2
    360  12ea							;the shot is "incremented up" in this. if it were to hit a backstop then it is reset to 00
    361  12ea
    362  12ea		       a0 08		      ldy	#$08	; this is 2x the number of shots we are allowing to be on screen, the max num is currently 4
    363  12ec
    364  12ec				   dpsLoop
    365  12ec		       b9 00 1d 	      LDA	playerShots,y	;the "first" thing holds 1e, 1f or 00. if it is 00 we want to write to it
    366  12ef		       c9 00		      cmp	#$00
    367  12f1		       f0 40		      beq	enddpsloop
    368  12f3
    369  12f3		       c9 1f		      cmp	#$1f
    370  12f5		       d0 1b		      bne	nextdps
    371  12f7							;draw the laser then shift it up one
    372  12f7		       88		      dey		; the gets  the address ready for the suffix value for the laser
    373  12f8		       b9 00 1d 	      LDA	playerShots,y
    374  12fb		       aa		      TAX		;transfer a to x to get ready for another aaaa ,x to write the laser to memory
    375  12fc		       a9 11		      lda	#$11	;load the character of the laser
    376  12fe
    377  12fe		       9d 00 1f 	      sta	#$1f00,x	; the laser is now stored here, 1f00 + 30,000 = 9430
    378  1301							;lda #$04 ;color code
    379  1301							;sta 9430 ,x ; x currently contains the offset we want to shift up
    380  1301
    381  1301
    382  1301		       98		      TYA
    383  1302		       48		      PHA
    384  1303		       20 9d 13 	      jsr	shiftupfordps	;x will contain the value that was shifted up
    385  1306		       68		      pla
    386  1307		       a8		      tay		;need to retrieve the y value corresponding to the list
    387  1308		       20 66 13 	      jsr	shiftupfordps2
    388  130b
    389  130b							;cpx #$ea
    390  130b							;bne skip
    391  130b							;jsr spinloop
    392  130b
    393  130b							;skip:
    394  130b		       8a		      TXA		; the offset of x calculated is now in a for a aaaa,y address
    395  130c		       99 00 1d 	      STA	playerShots ,y
    396  130f
    397  130f
    398  130f
    399  130f
    400  130f
    401  130f
    402  130f
    403  130f
    404  130f
    405  130f		       4c 2f 13 	      jmp	enddpsloop2
    406  1312
    407  1312
    408  1312				   nextdps		; this assumes that the prefix is 1e
    409  1312
    410  1312
    411  1312		       88		      dey		; the gets  the address ready for the suffix value for the laser
    412  1313		       b9 00 1d 	      LDA	playerShots ,y
    413  1316		       aa		      TAX		;transfer a to x to get ready for another aaaa ,x to write the laser to memory
    414  1317		       a9 11		      lda	#$11	;load the character of the laser
    415  1319
    416  1319		       9d 00 1e 	      sta	#$1e00 ,x	; the laser is now stored here, 1f00 + 30,000 = 9430
    417  131c		       a9 04		      lda	#$04	;color code
    418  131e		       9d d6 24 	      sta	9430 ,x	; x currently contains the offset we want to shift up
    419  1321
    420  1321
    421  1321
    422  1321		       98		      TYA
    423  1322		       48		      PHA
    424  1323		       20 9d 13 	      jsr	shiftupfordps	;x will contain the value that was shifted up
    425  1326
    426  1326		       68		      pla
    427  1327		       a8		      tay		;need to retrieve the y value corresponding to the list
    428  1328		       20 38 13 	      jsr	shiftupfordps3
    429  132b
    430  132b		       8a		      TXA		; the offset of x calculated is now in a for a aaaa,y address
    431  132c		       99 00 1d 	      STA	playerShots ,y
    432  132f
    433  132f
    434  132f
    435  132f
    436  132f
    437  132f				   enddpsloop2
    438  132f		       88		      dey		; the two deys prep for the next cycle
    439  1330		       d0 ba		      bne	dpsLoop
    440  1332		       60		      rts
    441  1333
    442  1333
    443  1333				   enddpsloop		; this ends it for a 00 value , need another 1 for non 00 values
    444  1333		       88		      dey
    445  1334		       88		      dey		; the two deys prep for the next cycle
    446  1335		       d0 b5		      bne	dpsLoop
    447  1337		       60		      rts
    448  1338
    449  1338
    450  1338
    451  1338
    452  1338
    453  1338
    454  1338
    455  1338
    456  1338
    457  1338
    458  1338
    459  1338
    460  1338
    461  1338				   shiftupfordps3		; the x register contains the value to be compared
    462  1338
    463  1338		       98		      TYA
    464  1339		       48		      PHA
    465  133a
    466  133a		       a0 16		      ldy	#$16	; need add 22 to shift something 1 char up
    467  133c
    468  133c				   shiftuploop3
    469  133c
    470  133c		       8c ff 1c 	      sty	temp
    471  133f
    472  133f		       ec ff 1c 	      cpx	temp
    473  1342		       f0 0c		      beq	sulnext1
    474  1344
    475  1344		       88		      dey
    476  1345		       d0 f5		      bne	shiftuploop3	; don't want to run the alg when x = 0
    477  1347
    478  1347		       e0 00		      cpx	#$00
    479  1349		       d0 18		      bne	sulend3
    480  134b
    481  134b		       a2 ea		      ldx	#$ea
    482  134d		       4c 58 13 	      jmp	sulend1
    483  1350							;the branch should end here
    484  1350
    485  1350				   sulnext1		;now the x register contains how much we want to add to 234, x must be at least1
    486  1350
    487  1350		       a0 ea		      ldy	#$ea
    488  1352
    489  1352				   snlooptop1
    490  1352
    491  1352		       c8		      iny
    492  1353		       ca		      dex
    493  1354		       d0 fc		      bne	snlooptop1	;y contains the offset of x after this, move it back to x
    494  1356
    495  1356		       98		      TYA
    496  1357		       aa		      TAX		; value now back in x
    497  1358
    498  1358				   sulend1
    499  1358
    500  1358		       68		      pla
    501  1359		       a8		      tay
    502  135a
    503  135a		       c8		      iny
    504  135b
    505  135b		       a9 00		      LDA	#$00
    506  135d		       99 00 1d 	      STA	playerShots ,y
    507  1360
    508  1360
    509  1360		       88		      dey
    510  1361
    511  1361		       98		      TYA
    512  1362		       48		      PHA
    513  1363
    514  1363				   sulend3
    515  1363
    516  1363		       68		      pla
    517  1364		       a8		      tay
    518  1365
    519  1365		       60		      rts
    520  1366
    521  1366
    522  1366
    523  1366
    524  1366
    525  1366
    526  1366
    527  1366
    528  1366
    529  1366
    530  1366
    531  1366
    532  1366
    533  1366
    534  1366
    535  1366
    536  1366
    537  1366
    538  1366
    539  1366
    540  1366
    541  1366
    542  1366
    543  1366
    544  1366
    545  1366
    546  1366
    547  1366
    548  1366
    549  1366
    550  1366
    551  1366
    552  1366
    553  1366				   shiftupfordps2		; the x register contains the value to be compared
    554  1366
    555  1366		       98		      TYA
    556  1367		       48		      PHA
    557  1368
    558  1368		       a0 15		      ldy	#$15	; need add 22 to shift something 1 char up
    559  136a
    560  136a		       e0 00		      cpx	#$00
    561  136c		       f0 2a		      beq	endendend
    562  136e
    563  136e
    564  136e				   shiftuploop2
    565  136e
    566  136e		       8c ff 1c 	      sty	temp
    567  1371
    568  1371		       ec ff 1c 	      cpx	temp
    569  1374		       f0 0c		      beq	sulnext
    570  1376
    571  1376		       88		      dey
    572  1377							;cpy #$01
    573  1377		       d0 f5		      bne	shiftuploop2	; don't want to run the alg when x = 0
    574  1379
    575  1379		       e0 00		      cpx	#$00
    576  137b		       d0 18		      bne	sulend2
    577  137d
    578  137d		       a2 ea		      ldx	#$ea
    579  137f		       4c 8a 13 	      jmp	sulend
    580  1382							;the branch should end here
    581  1382
    582  1382				   sulnext		;now the x register contains how much we want to add to 234, x must be at least1
    583  1382
    584  1382		       a0 ea		      ldy	#$ea
    585  1384
    586  1384				   snlooptop
    587  1384
    588  1384		       c8		      iny
    589  1385		       ca		      dex
    590  1386		       d0 fc		      bne	snlooptop	;y contains the offset of x after this, move it back to x
    591  1388
    592  1388		       98		      TYA
    593  1389		       aa		      TAX		; value now back in x
    594  138a
    595  138a				   sulend
    596  138a
    597  138a		       68		      pla
    598  138b		       a8		      tay
    599  138c
    600  138c		       c8		      iny
    601  138d
    602  138d		       a9 1e		      LDA	#$1e
    603  138f		       99 00 1d 	      STA	playerShots ,y
    604  1392
    605  1392
    606  1392		       88		      dey
    607  1393
    608  1393		       98		      TYA
    609  1394		       48		      PHA
    610  1395
    611  1395				   sulend2
    612  1395
    613  1395		       68		      pla
    614  1396		       a8		      tay
    615  1397
    616  1397		       60		      rts
    617  1398
    618  1398				   endendend
    619  1398		       a2 ea		      ldx	#$ea
    620  139a
    621  139a		       4c 8a 13 	      jmp	sulend
    622  139d
    623  139d
    624  139d
    625  139d
    626  139d				   shiftupfordps		;actually decrements, but shifts stuff up the screen
    627  139d
    628  139d							;ldy #$16 ; need add 22 to shift something 1 char up
    629  139d
    630  139d				   shiftuploop1
    631  139d		       e0 00		      cpx	#$00
    632  139f		       f0 04		      beq	endsul1
    633  13a1		       8a		      txa
    634  13a2		       e9 16		      sbc	#$16
    635  13a4		       aa		      tax
    636  13a5
    637  13a5							;dex
    638  13a5							;cpx #$00
    639  13a5							;beq endsul1
    640  13a5							;dey
    641  13a5							;bne shiftuploop1
    642  13a5				   endsul1
    643  13a5		       60		      RTS
    644  13a6
    645  13a6
    646  13a6
    647  13a6
    648  13a6				   spinloop
    649  13a6
    650  13a6
    651  13a6							;lda $00c5		 ; current key held down -> page 179 of vic20 manual
    652  13a6							;jsr $ffd2
    653  13a6
    654  13a6		       a2 00		      ldx	#0
    655  13a8		       ea		      nop		;nops used as busy work
    656  13a9		       ea		      nop
    657  13aa		       ca		      dex
    658  13ab		       d0 f9		      bne	spinloop
    659  13ad
    660  13ad		       60		      rts
    661  13ae
    662  13ae
    663  13ae
    664  13ae
    665  13ae
    666  13ae
    667  13ae
    668  13ae
    669  13ae
    670  13ae
    671  13ae
    672  13ae				   shiftUp		;actually decrements, but shifts stuff up the screen
    673  13ae
    674  13ae							;    ldx #$16 ; need add 22 to shift something 1 char up
    675  13ae							;    TAY ; transfer a to y for decrement(moves stuff higher)
    676  13ae		       38		      sec
    677  13af		       e9 16		      sbc	#$16
    678  13b1
    679  13b1							;shiftuploop:
    680  13b1							;    dey
    681  13b1							;    dex
    682  13b1							;    bne shiftuploop
    683  13b1							;    TYA
    684  13b1		       60		      rts
------- FILE charset.asm LEVEL 2 PASS 2
      0  13b2					      include	"charset.asm"
      1  1c00					      org	$1c00
      2  1c00
      3  1c00				   characters
      4  1c00
      5  1c00		       00 00 00 00*	      hex	00 00 00 00 00 00 00 00	; 0 Blank character
      6  1c08		       ff ff ff ff*	      hex	ff ff ff ff ff ff ff ff	; 1 Full character
      7  1c10		       00 44 ee fe*	      hex	00 44 ee fe fe 7c 38 10	; 2 Heart
      8  1c18		       08 08 08 1c*	      hex	08 08 08 1c 3e 3e 49 08	; 3 Starfighter
      9  1c20		       00 00 00 00*	      hex	00 00 00 00 00 00 00 00	; 4 Barrel roll left
     10  1c28		       00 00 00 00*	      hex	00 00 00 00 00 00 00 00	; 5 Barrel roll right
     11  1c30		       00 18 3c ff*	      hex	00 18 3c ff 3c 18 18 24	; 6 Explosion
     12  1c38		       3f 3f 0f 03*	      hex	3f 3f 0f 03 01 01 01 01	; 7 Boss Top 1
     13  1c40		       3c fe ff ff*	      hex	3c fe ff ff 7f 3f 3f 3b	; 8 Boss Top 2
     14  1c48		       3c 7f ff ff*	      hex	3c 7f ff ff fe fc fc dc	; 9 Boss Top 3
     15  1c50		       fc fc f0 c0*	      hex	fc fc f0 c0 80 80 80 80	; 10 Boss Top 4
     16  1c58		       01 00 00 00*	      hex	01 00 00 00 00 00 00 00	; 11 Boss Bottom 1
     17  1c60		       3b 1a 1a 1a*	      hex	3b 1a 1a 1a 0a 0a 0a 02	; 12 Boss Bottom 2
     18  1c68		       dc 58 58 58*	      hex	dc 58 58 58 50 50 50 40	; 13 Boss Bottom 3
     19  1c70		       80 00 00 00*	      hex	80 00 00 00 00 00 00 00	; 14 Boss Bottom 4
     20  1c78		       24 24 ff ff*	      hex	24 24 ff ff 7e 24 24 00	; 15 Laser Minion
     21  1c80		       24 24 7e ff*	      hex	24 24 7e ff 7e 3c 24 24	; 16 Rocket Minion
     22  1c88		       01 01 01 01*	      hex	01 01 01 01 01 01 01 01	; 17 Laser
     23  1c90		       a0 a0 a0 a0*	      hex	a0 a0 a0 a0 a0 a0 a0 a0	; 18 Rocket
------- FILE game.asm
    686  1c98
    687  1c98		       40	   key_pressed dc.b	#64	; set to default 64 for no key pressed
    688  1c99
    689  1c99				   titlescreen
    690  1c99		       0d		      dc.b	$0d
    691  1c9a		       53 20 54 20*	      dc.b	"S T A R F O X  1 9 8 0", $0d, $0d, $0d
    692  1cb3		       20 20 20 20*	      dc.b	"	JACK XIE", $0d
    693  1cc2		       20 20 20 20*	      dc.b	"     MICHAEL QIU", $0d
    694  1cd3		       20 20 20 20*	      dc.b	"	ALAN FUNG", $0d, $0d, $0d
    695  1ce5		       0d 0d 0d 0d*	      dc.b	$0d, $0d, $0d, $0d, $0d, $0d
    696  1ceb		       20 20 20 50*	      dc.b	"   PRESS ANY BUTTON", $0d
    697  1cff
    698  1cff				   temp
    699  1cff		       00		      dc.b:	#$00
    700  1d00
    701  1d00
    702  1d00
    703  1d00							;---------------------------------------------------position tracking--------------------------------------------
    704  1d00
    705  1d00							;limit of 4 "shots" for now
    706  1d00
    707  1d00				   playerShots
    708  1d00		       00 00 00 00*	      dc.b	#$00, #$00, #$00, #$00, #$00, #$00, #$00, #$00, #$00
    709  1d09
    710  1d09				   enemyShots
    711  1d09		       00 00 00 00*	      dc.b	#$00, #$00, #$00, #$00, #$00, #$00, #$00, #$00, #$00
    712  1d12
    713  1d12				   main_notes		; Music notes in hex in order of last note to first note
    714  1d12		       00 93 a3 93*	      dc.b	#$00, #$93, #$a3, #$93, #$af, #$93, #$b7, #$93, #$9f, #$91, #$93, #$a3, #$93, #$af, #$93, #$b7, #$93, #$a3, #$9f, #$93, #$b7, #$93, #$97, #$93, #$00, #$93, #$a3, #$93, #$00, #$93, #$af, #$93, #$00, #$93, #$b7, #$93
    715  1d36
    716  1d36				   main_music_registers 		; this must correspond with the notes. for example if there are 20 notes then there are 20 values in this thing
    717  1d36		       00 0c 0c 0c*	      dc.b	#$00, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c
    718  1d5a
    719  1d5a				   gameover_notes		; Game over tune notes (12)
    720  1d5a		       00 00 00 b7*	      dc.b	#$00, #$00, #$00, #$b7, #$b7, #$b7, #$b7, #$bf, #$c3, #$c9, #$cf, #$d1, #$d7, #$db
    721  1d68
    722  1d68				   victory_notes		; Victory tune notes (12)
    723  1d68		       00 cb cb cb*	      dc.b	#$00, #$cb, #$cb, #$cb, #$c9, #$bb, #$c3, #$b4, #$00, #$b4, #$b7, #$a8, #$93, #$83
    724  1d76
    725  1d76				   tune_registers
    726  1d76		       00 0c 0c 0c*	      dc.b	#$00, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c, #$0c
    727  1d84
    728  1d84				   laser_sound
    729  1d84		       00 09 09 21	      dc.b	#$00, #$109, #$109, #$121
    730  1d88
    731  1d88				   minion_status
    732  1d88		       00 00 00 00	      dc.b	#$00, #$00, #$00, #$00
    733  1d8c				   minion_pos
    734  1d8c		       6f 81 87 89	      dc.b	#$6f, #$81, #$87, #$89
    735  1d90
